import * as inquirer from "@inquirer/prompts";
import fs from "fs";
import prettier from "prettier";

import { HyperAgentConfig } from "@/types";

export type UserFeedback = {
  approved: boolean;
  message?: string;
  lastPlannedActions?: any; // The agent output that was rejected
};

export function initActionScript(
  actionLogFile: string,
  task: string,
  agentConfig?: HyperAgentConfig<"Local" | "Hyperbrowser">,
) {
  let agentConfigString: string;
  let llmComment = "";

  if (agentConfig) {
    const configCopy = { ...agentConfig }; // Create a shallow copy to modify
    if (configCopy.llm) {
      const llm = configCopy.llm as any;
      const llmClassName = llm.constructor?.name || "LLM";
      const llmParams = JSON.stringify(llm, null, 2);
      llmComment = `
      // The agent's LLM configuration has been omitted as it cannot be reliably stringified.
      // It was an instance of '${llmClassName}'.
      // You may need to manually instantiate it. The original parameters were:
      // Note: The following parameters are from JSON.stringify and may be an incomplete representation of the class instance.
      // ${llmParams.replace(/\n/g, "\n      // ")}
      `;
      delete configCopy.llm;
    }
    agentConfigString = JSON.stringify(configCopy, null, 2);
  } else {
    agentConfigString = "";
  }

  fs.appendFileSync(
    actionLogFile,
    `
    /*
    This script is generated by Hyperagent.
    It is used to execute the task and log the actions.
    Task: ${task}
    */

    import { HyperAgent } from "@hyperbrowser/agent";
    import { waitForElementToBeEnabled, waitForElementToBeStable } from "@hyperbrowser/agent/actions";
    import { parseMarkdown, sleep } from "@hyperbrowser/agent/utils";
    import { VariableExtractionOutput, HyperVariable } from "@hyperbrowser/agent/types";


    (async () => {
${llmComment}
      const agent = new HyperAgent(${agentConfigString});
      const page = await agent.newPage();
      if (!page) {
        throw new Error("No page found");
      }

      const ctx = {
        page,
        llm: agent.llm,
        variables: {} as Record<string, HyperVariable>,
      };

    `,
  );

  // Add main execution function
  fs.appendFileSync(
    actionLogFile,
    `
` + `\n\n`,
  );
}

export async function wrapUpActionScript(actionLogFile: string) {
  fs.appendFileSync(
    actionLogFile,
    `

    await agent.closeAgent();
    console.log("Action script complete");

  `,
  );
  fs.appendFileSync(actionLogFile, `})();`);

  await formatActionScript(actionLogFile);
}

export async function formatActionScript(actionLogFile: string) {
  const formatted = await prettier.format(
    fs.readFileSync(actionLogFile, "utf-8"),
    { filepath: actionLogFile },
  );
  fs.writeFileSync(actionLogFile, formatted);
}

export async function getUserFeedback(
  timeoutDuration: number = 10000,
): Promise<UserFeedback> {
  const userApproval = await Promise.race([
    inquirer.select({
      message: "Do you like this planned step?",
      choices: [
        { value: "yes", description: "Looks good, let's execute it" },
        { value: "no", description: "Provide feedback for improvement" },
      ],
    }),
    new Promise<string>((resolve) =>
      setTimeout(() => resolve("yes"), timeoutDuration),
    ),
  ]);

  if (userApproval === "yes") {
    return { approved: true, message: "User indicated the step went well" };
  }

  const improvementFeedback = await inquirer.input({
    message: "Please tell me what you want to improve:",
    required: true,
  });
  return {
    approved: false,
    message: `User requested improvement with feedback: "${improvementFeedback}"`,
  };
}
